{"ast":null,"code":"// import { createAsyncThunk } from \"@reduxjs/toolkit\";\n// import * as Api from '../Api/Api';\n// export const fetchContacts = createAsyncThunk(\n//     \"contacts/fetchContacts\",\n//     async (_, {rejectWithValue}) => {\n//         try{\n//             const result = await Api.getContacts()\n//             return result\n//         } catch(err){\n//             return rejectWithValue(err)\n//         }\n//     }\n// );\n// export const addContact = createAsyncThunk(\n//     \"contacts/addContact\",\n//     async (data, {rejectWithValue}) => {\n//         try{\n//             const result = await Api.addContact(data)\n//             return result\n//         } catch(err){\n//             return rejectWithValue(err)\n//         }\n//     },\n//     {\n//         condition: (data, {getState}) => {\n//             const {contacts} = getState();\n//             const {name} = data;\n//             const nameCompare = name.toLowerCase();\n//             const result = contacts.items.find(({name}) => {\n//                 return (name.toLowerCase() === nameCompare);\n//             });\n//             if(result){\n//                 alert(`${name} has already been added`);\n//                 return false;\n//             }            \n//         }\n//     }\n// )\n// export const removeContact = createAsyncThunk(\n//     \"contacts/removeContact\",\n//     async (id, {rejectWithValue}) => {\n//         try{\n//             const result = await Api.removeContact(id)\n//             return result.id\n//         } catch(err){\n//             return rejectWithValue(err)\n//         }\n//     }\n// )\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport { addContact, getContacts, removeContact } from '../Api/Api';\nexport const addContactApi = createAsyncThunk('contacts/addContact', async (contact, thunkApi) => {\n  try {\n    const contacts = await addContactApi(contact);\n    return contacts;\n  } catch (error) {\n    return thunkApi.rejectWithValue(error);\n  }\n});\nexport const fetchContacts = createAsyncThunk('contacts/getContacts', async (_, thunkApi) => {\n  try {\n    const contacts = await getContactsApi();\n    console.log('contacts :>> ', contacts);\n    return contacts;\n  } catch (error) {\n    return thunkApi.rejectWithValue(error);\n  }\n});\nexport const removeContactApi = createAsyncThunk('contacts/removeContact', async (id, thunkApi) => {\n  try {\n    const respId = await removeContactApi(id);\n    return respId;\n  } catch (error) {\n    return thunkApi.rejectWithValue(error);\n  }\n});","map":{"version":3,"sources":["/Users/tonya/Documents/GitHub/goit-react-hw-07-phonebook/src/redux/operations.js"],"names":["createAsyncThunk","addContact","getContacts","removeContact","addContactApi","contact","thunkApi","contacts","error","rejectWithValue","fetchContacts","_","getContactsApi","console","log","removeContactApi","id","respId"],"mappings":"AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA,SAASA,gBAAT,QAAiC,kBAAjC;AACA,SAASC,UAAT,EAAqBC,WAArB,EAAkCC,aAAlC,QAAuD,YAAvD;AAEA,OAAO,MAAMC,aAAa,GAAGJ,gBAAgB,CAAC,qBAAD,EAAwB,OAAOK,OAAP,EAAgBC,QAAhB,KAA6B;AAChG,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMH,aAAa,CAACC,OAAD,CAApC;AACA,WAAOE,QAAP;AACD,GAHD,CAGE,OAAOC,KAAP,EAAc;AACd,WAAOF,QAAQ,CAACG,eAAT,CAAyBD,KAAzB,CAAP;AACD;AACF,CAP4C,CAAtC;AASP,OAAO,MAAME,aAAa,GAAGV,gBAAgB,CAAC,sBAAD,EAAyB,OAAOW,CAAP,EAAUL,QAAV,KAAuB;AAC3F,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMK,cAAc,EAArC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BP,QAA7B;AACA,WAAOA,QAAP;AACD,GAJD,CAIE,OAAOC,KAAP,EAAc;AACd,WAAOF,QAAQ,CAACG,eAAT,CAAyBD,KAAzB,CAAP;AACD;AACF,CAR4C,CAAtC;AAUP,OAAO,MAAMO,gBAAgB,GAAGf,gBAAgB,CAAC,wBAAD,EAA2B,OAAOgB,EAAP,EAAWV,QAAX,KAAwB;AACjG,MAAI;AACF,UAAMW,MAAM,GAAG,MAAMF,gBAAgB,CAACC,EAAD,CAArC;AACA,WAAOC,MAAP;AACD,GAHD,CAGE,OAAOT,KAAP,EAAc;AACd,WAAOF,QAAQ,CAACG,eAAT,CAAyBD,KAAzB,CAAP;AACD;AACF,CAP+C,CAAzC","sourcesContent":["// import { createAsyncThunk } from \"@reduxjs/toolkit\";\n\n// import * as Api from '../Api/Api';\n\n// export const fetchContacts = createAsyncThunk(\n//     \"contacts/fetchContacts\",\n//     async (_, {rejectWithValue}) => {\n//         try{\n//             const result = await Api.getContacts()\n//             return result\n//         } catch(err){\n//             return rejectWithValue(err)\n//         }\n//     }\n// );\n\n// export const addContact = createAsyncThunk(\n//     \"contacts/addContact\",\n//     async (data, {rejectWithValue}) => {\n//         try{\n//             const result = await Api.addContact(data)\n//             return result\n//         } catch(err){\n//             return rejectWithValue(err)\n//         }\n//     },\n//     {\n//         condition: (data, {getState}) => {\n//             const {contacts} = getState();\n//             const {name} = data;\n//             const nameCompare = name.toLowerCase();\n//             const result = contacts.items.find(({name}) => {\n//                 return (name.toLowerCase() === nameCompare);\n//             });\n//             if(result){\n//                 alert(`${name} has already been added`);\n//                 return false;\n//             }            \n//         }\n//     }\n// )\n\n// export const removeContact = createAsyncThunk(\n//     \"contacts/removeContact\",\n//     async (id, {rejectWithValue}) => {\n//         try{\n//             const result = await Api.removeContact(id)\n//             return result.id\n//         } catch(err){\n//             return rejectWithValue(err)\n//         }\n//     }\n// )\n\n\n\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport { addContact, getContacts, removeContact } from '../Api/Api';\n\nexport const addContactApi = createAsyncThunk('contacts/addContact', async (contact, thunkApi) => {\n  try {\n    const contacts = await addContactApi(contact);\n    return contacts;\n  } catch (error) {\n    return thunkApi.rejectWithValue(error);\n  }\n});\n\nexport const fetchContacts = createAsyncThunk('contacts/getContacts', async (_, thunkApi) => {\n  try {\n    const contacts = await getContactsApi();\n    console.log('contacts :>> ', contacts);\n    return contacts;\n  } catch (error) {\n    return thunkApi.rejectWithValue(error);\n  }\n});\n\nexport const removeContactApi = createAsyncThunk('contacts/removeContact', async (id, thunkApi) => {\n  try {\n    const respId = await removeContactApi(id);\n    return respId;\n  } catch (error) {\n    return thunkApi.rejectWithValue(error);\n  }\n});"]},"metadata":{},"sourceType":"module"}