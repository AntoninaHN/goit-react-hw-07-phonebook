{"ast":null,"code":"import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport * as contactsApi from '../../Api/Api';\nexport const fetchContacts = createAsyncThunk(\"contacts/fetchContacts\", async (_, _ref) => {\n  let {\n    rejectWithValue\n  } = _ref;\n\n  try {\n    const result = await contactsApi.fetchContacts();\n    return result;\n  } catch (err) {\n    return rejectWithValue(err);\n  }\n});\nexport const addContact = createAsyncThunk(\"contacts/addContact\", async (data, _ref2) => {\n  let {\n    rejectWithValue\n  } = _ref2;\n\n  try {\n    const result = await contactsApi.addContact(data);\n    return result;\n  } catch (err) {\n    return rejectWithValue(err);\n  }\n}, {\n  condition: (data, _ref3) => {\n    let {\n      getState\n    } = _ref3;\n    const {\n      contacts\n    } = getState();\n    const {\n      name\n    } = data;\n    const nameCompare = name.toLowerCase();\n    const result = contacts.items.find(_ref4 => {\n      let {\n        name\n      } = _ref4;\n      return name.toLowerCase() === nameCompare;\n    });\n\n    if (result) {\n      alert(`${name} has already been added`);\n      return false;\n    }\n  }\n});\nexport const removeContact = createAsyncThunk(\"contacts/removeContact\", async (id, _ref5) => {\n  let {\n    rejectWithValue\n  } = _ref5;\n\n  try {\n    const result = await contactsApi.removeContact(id);\n    return result.id;\n  } catch (err) {\n    return rejectWithValue(err);\n  }\n});","map":{"version":3,"sources":["/Users/tonya/Documents/GitHub/goit-react-hw-07-phonebook/src/redux/operations.js"],"names":["createAsyncThunk","contactsApi","fetchContacts","_","rejectWithValue","result","err","addContact","data","condition","getState","contacts","name","nameCompare","toLowerCase","items","find","alert","removeContact","id"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,kBAAjC;AAEA,OAAO,KAAKC,WAAZ,MAA6B,eAA7B;AAEA,OAAO,MAAMC,aAAa,GAAGF,gBAAgB,CACzC,wBADyC,EAEzC,OAAOG,CAAP,WAAgC;AAAA,MAAtB;AAACC,IAAAA;AAAD,GAAsB;;AAC5B,MAAG;AACC,UAAMC,MAAM,GAAG,MAAMJ,WAAW,CAACC,aAAZ,EAArB;AACA,WAAOG,MAAP;AACH,GAHD,CAGE,OAAMC,GAAN,EAAU;AACR,WAAOF,eAAe,CAACE,GAAD,CAAtB;AACH;AACJ,CATwC,CAAtC;AAYP,OAAO,MAAMC,UAAU,GAAGP,gBAAgB,CACtC,qBADsC,EAEtC,OAAOQ,IAAP,YAAmC;AAAA,MAAtB;AAACJ,IAAAA;AAAD,GAAsB;;AAC/B,MAAG;AACC,UAAMC,MAAM,GAAG,MAAMJ,WAAW,CAACM,UAAZ,CAAuBC,IAAvB,CAArB;AACA,WAAOH,MAAP;AACH,GAHD,CAGE,OAAMC,GAAN,EAAU;AACR,WAAOF,eAAe,CAACE,GAAD,CAAtB;AACH;AACJ,CATqC,EAUtC;AACIG,EAAAA,SAAS,EAAE,CAACD,IAAD,YAAsB;AAAA,QAAf;AAACE,MAAAA;AAAD,KAAe;AAC7B,UAAM;AAACC,MAAAA;AAAD,QAAaD,QAAQ,EAA3B;AACA,UAAM;AAACE,MAAAA;AAAD,QAASJ,IAAf;AACA,UAAMK,WAAW,GAAGD,IAAI,CAACE,WAAL,EAApB;AACA,UAAMT,MAAM,GAAGM,QAAQ,CAACI,KAAT,CAAeC,IAAf,CAAoB,SAAY;AAAA,UAAX;AAACJ,QAAAA;AAAD,OAAW;AAC3C,aAAQA,IAAI,CAACE,WAAL,OAAuBD,WAA/B;AACH,KAFc,CAAf;;AAGA,QAAGR,MAAH,EAAU;AACNY,MAAAA,KAAK,CAAE,GAAEL,IAAK,yBAAT,CAAL;AACA,aAAO,KAAP;AACH;AACJ;AAZL,CAVsC,CAAnC;AA0BP,OAAO,MAAMM,aAAa,GAAGlB,gBAAgB,CACzC,wBADyC,EAEzC,OAAOmB,EAAP,YAAiC;AAAA,MAAtB;AAACf,IAAAA;AAAD,GAAsB;;AAC7B,MAAG;AACC,UAAMC,MAAM,GAAG,MAAMJ,WAAW,CAACiB,aAAZ,CAA0BC,EAA1B,CAArB;AACA,WAAOd,MAAM,CAACc,EAAd;AACH,GAHD,CAGE,OAAMb,GAAN,EAAU;AACR,WAAOF,eAAe,CAACE,GAAD,CAAtB;AACH;AACJ,CATwC,CAAtC","sourcesContent":["import { createAsyncThunk } from \"@reduxjs/toolkit\";\n\nimport * as contactsApi from '../../Api/Api';\n\nexport const fetchContacts = createAsyncThunk(\n    \"contacts/fetchContacts\",\n    async (_, {rejectWithValue}) => {\n        try{\n            const result = await contactsApi.fetchContacts()\n            return result\n        } catch(err){\n            return rejectWithValue(err)\n        }\n    }\n);\n\nexport const addContact = createAsyncThunk(\n    \"contacts/addContact\",\n    async (data, {rejectWithValue}) => {\n        try{\n            const result = await contactsApi.addContact(data)\n            return result\n        } catch(err){\n            return rejectWithValue(err)\n        }\n    },\n    {\n        condition: (data, {getState}) => {\n            const {contacts} = getState();\n            const {name} = data;\n            const nameCompare = name.toLowerCase();\n            const result = contacts.items.find(({name}) => {\n                return (name.toLowerCase() === nameCompare);\n            });\n            if(result){\n                alert(`${name} has already been added`);\n                return false;\n            }            \n        }\n    }\n)\n\nexport const removeContact = createAsyncThunk(\n    \"contacts/removeContact\",\n    async (id, {rejectWithValue}) => {\n        try{\n            const result = await contactsApi.removeContact(id)\n            return result.id\n        } catch(err){\n            return rejectWithValue(err)\n        }\n    }\n)"]},"metadata":{},"sourceType":"module"}