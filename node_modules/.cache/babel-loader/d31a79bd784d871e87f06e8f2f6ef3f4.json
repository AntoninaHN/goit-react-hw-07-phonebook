{"ast":null,"code":"var _jsxFileName = \"/Users/tonya/Documents/GitHub/goit-react-hw-07-phonebook/src/components/Filter/Filter.jsx\",\n    _s = $RefreshSig$();\n\nimport { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\nimport styles from './Filter.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Filter = _ref => {\n  _s();\n\n  let {\n    value,\n    onChange\n  } = _ref;\n  const filterInputId = useRef(nanoid());\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      className: styles.label,\n      htmlFor: filterInputId.current,\n      children: \" Find contacts by name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: styles.input,\n      type: \"text\",\n      name: \"filter\",\n      value: value,\n      onChange: onChange,\n      id: filterInputId.current\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Filter, \"cghJwfqMRuoBYhfcz8bi9aG9jck=\");\n\n_c = Filter;\nexport default _c2 = memo(Filter);\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Filter\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/tonya/Documents/GitHub/goit-react-hw-07-phonebook/src/components/Filter/Filter.jsx"],"names":["useRef","PropTypes","nanoid","styles","Filter","value","onChange","filterInputId","label","current","input","memo","propTypes","string","isRequired","func"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAT,QAAuB,QAAvB;AAEA,OAAOC,MAAP,MAAmB,qBAAnB;;;;AAGA,MAAMC,MAAM,GAAG,QAAyB;AAAA;;AAAA,MAAxB;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAwB;AACpC,QAAMC,aAAa,GAAGP,MAAM,CAACE,MAAM,EAAP,CAA5B;AACF,sBACE;AAAA,4BACE;AAAO,MAAA,SAAS,EAAEC,MAAM,CAACK,KAAzB;AAAgC,MAAA,OAAO,EAAED,aAAa,CAACE,OAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAO,MAAA,SAAS,EAAEN,MAAM,CAACO,KAAzB;AAAgC,MAAA,IAAI,EAAC,MAArC;AAA4C,MAAA,IAAI,EAAC,QAAjD;AAA0D,MAAA,KAAK,EAAEL,KAAjE;AAAwE,MAAA,QAAQ,EAAEC,QAAlF;AAA4F,MAAA,EAAE,EAAEC,aAAa,CAACE;AAA9G;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAMD,CARD;;GAAML,M;;KAAAA,M;AAUN,qBAAeO,IAAI,CAACP,MAAD,CAAnB;AAEAA,MAAM,CAACQ,SAAP,GAAmB;AACjBP,EAAAA,KAAK,EAAEJ,SAAS,CAACY,MAAV,CAAiBC,UADP;AAEjBR,EAAAA,QAAQ,EAAEL,SAAS,CAACc,IAAV,CAAeD;AAFR,CAAnB","sourcesContent":["import { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\n\nimport styles from './Filter.module.css'\n\n\nconst Filter = ({ value, onChange }) => {\n    const filterInputId = useRef(nanoid())\n  return (\n    <>\n      <label className={styles.label} htmlFor={filterInputId.current}> Find contacts by name</label>\n      <input className={styles.input} type=\"text\" name=\"filter\" value={value} onChange={onChange} id={filterInputId.current} />\n    </>\n  );\n};\n\nexport default memo(Filter);\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}