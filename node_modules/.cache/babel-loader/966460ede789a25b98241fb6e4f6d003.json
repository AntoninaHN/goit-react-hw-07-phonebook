{"ast":null,"code":"import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { addContactApi, getContactsApi, deleteContactApi } from '../Api/API'; // export const addContact = createAsyncThunk('contacts/addContact', async (contact, thunkApi) => {\n//   try {\n//     const contacts = await addContactApi(contact);\n//     return contacts;\n//   } catch (error) {\n//     return thunkApi.rejectWithValue(error);\n//   }\n// });\n// export const getContacts = createAsyncThunk('contacts/getContacts', async (_, thunkApi) => {\n//   try {\n//     const contacts = await getContactsApi();\n//     return contacts;\n//   } catch (error) {\n//     return thunkApi.rejectWithValue(error);\n//   }\n// });\n// export const deleteContact = createAsyncThunk('contacts/deleteContact', async (id, thunkApi) => {\n//   try {\n//     const respId = await deleteContactApi(id);\n//     return respId;\n//   } catch (error) {\n//     return thunkApi.rejectWithValue(error);\n//   }\n// });\n\nexport const getContacts = createAsyncThunk('contacts/getContacts', async (_, _ref) => {\n  let {\n    rejectWithValue\n  } = _ref;\n  const data = await addContactApi.getContacts();\n\n  try {\n    return data;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const addContact = createAsyncThunk('contacts/addContact', async (contact, _ref2) => {\n  let {\n    rejectWithValue\n  } = _ref2;\n  const data = await getContactsApi.addContact(contact);\n\n  try {\n    return data;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n}, {\n  condition: (contact, _ref3) => {\n    let {\n      getState\n    } = _ref3;\n    const {\n      contacts\n    } = getState();\n    const dublicate = contacts.items.find(item => item.name === contact.name);\n\n    if (dublicate) {\n      alert(`${contact.name} is already in contacts list`);\n      return false;\n    }\n\n    return contact;\n  }\n});\nexport const deleteContact = createAsyncThunk('contacts/deleteContact', async (id, _ref4) => {\n  let {\n    rejectWithValue\n  } = _ref4;\n  const data = await deleteContactApi.deleteContact(id);\n\n  try {\n    return data.id;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});","map":{"version":3,"sources":["/Users/tonya/Documents/GitHub/goit-react-hw-07-phonebook/src/redux/operations.js"],"names":["createAsyncThunk","addContactApi","getContactsApi","deleteContactApi","getContacts","_","rejectWithValue","data","error","message","addContact","contact","condition","getState","contacts","dublicate","items","find","item","name","alert","deleteContact","id"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,kBAAjC;AACA,SAASC,aAAT,EAAwBC,cAAxB,EAAwCC,gBAAxC,QAAgE,YAAhE,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,OAAO,MAAMC,WAAW,GAAGJ,gBAAgB,CACzC,sBADyC,EAEzC,OAAOK,CAAP,WAAkC;AAAA,MAAxB;AAAEC,IAAAA;AAAF,GAAwB;AAChC,QAAMC,IAAI,GAAG,MAAMN,aAAa,CAACG,WAAd,EAAnB;;AACA,MAAI;AACF,WAAOG,IAAP;AACD,GAFD,CAEE,OAAOC,KAAP,EAAc;AACd,WAAOF,eAAe,CAACE,KAAK,CAACC,OAAP,CAAtB;AACD;AACF,CATwC,CAApC;AAYP,OAAO,MAAMC,UAAU,GAAGV,gBAAgB,CACxC,qBADwC,EAExC,OAAOW,OAAP,YAAwC;AAAA,MAAxB;AAAEL,IAAAA;AAAF,GAAwB;AACtC,QAAMC,IAAI,GAAG,MAAML,cAAc,CAACQ,UAAf,CAA0BC,OAA1B,CAAnB;;AACA,MAAI;AACF,WAAOJ,IAAP;AACD,GAFD,CAEE,OAAOC,KAAP,EAAc;AACd,WAAOF,eAAe,CAACE,KAAK,CAACC,OAAP,CAAtB;AACD;AACF,CATuC,EAUxC;AACEG,EAAAA,SAAS,EAAE,CAACD,OAAD,YAA2B;AAAA,QAAjB;AAAEE,MAAAA;AAAF,KAAiB;AACpC,UAAM;AAAEC,MAAAA;AAAF,QAAeD,QAAQ,EAA7B;AACA,UAAME,SAAS,GAAGD,QAAQ,CAACE,KAAT,CAAeC,IAAf,CAAoBC,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAcR,OAAO,CAACQ,IAAlD,CAAlB;;AACA,QAAIJ,SAAJ,EAAe;AACbK,MAAAA,KAAK,CAAE,GAAET,OAAO,CAACQ,IAAK,8BAAjB,CAAL;AACA,aAAO,KAAP;AACD;;AACD,WAAOR,OAAP;AACD;AATH,CAVwC,CAAnC;AAuBP,OAAO,MAAMU,aAAa,GAAGrB,gBAAgB,CAC3C,wBAD2C,EAE3C,OAAOsB,EAAP,YAAmC;AAAA,MAAxB;AAAEhB,IAAAA;AAAF,GAAwB;AACjC,QAAMC,IAAI,GAAG,MAAMJ,gBAAgB,CAACkB,aAAjB,CAA+BC,EAA/B,CAAnB;;AACA,MAAI;AACF,WAAOf,IAAI,CAACe,EAAZ;AACD,GAFD,CAEE,OAAOd,KAAP,EAAc;AACd,WAAOF,eAAe,CAACE,KAAK,CAACC,OAAP,CAAtB;AACD;AACF,CAT0C,CAAtC","sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { addContactApi, getContactsApi, deleteContactApi } from '../Api/API';\n\n\n// export const addContact = createAsyncThunk('contacts/addContact', async (contact, thunkApi) => {\n//   try {\n//     const contacts = await addContactApi(contact);\n//     return contacts;\n//   } catch (error) {\n//     return thunkApi.rejectWithValue(error);\n//   }\n// });\n\n// export const getContacts = createAsyncThunk('contacts/getContacts', async (_, thunkApi) => {\n//   try {\n//     const contacts = await getContactsApi();\n//     return contacts;\n//   } catch (error) {\n//     return thunkApi.rejectWithValue(error);\n//   }\n// });\n\n// export const deleteContact = createAsyncThunk('contacts/deleteContact', async (id, thunkApi) => {\n//   try {\n//     const respId = await deleteContactApi(id);\n//     return respId;\n//   } catch (error) {\n//     return thunkApi.rejectWithValue(error);\n//   }\n// });\n\n\n\nexport const getContacts = createAsyncThunk(\n  'contacts/getContacts',\n  async (_, { rejectWithValue }) => {\n    const data = await addContactApi.getContacts();\n    try {\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const addContact = createAsyncThunk(\n  'contacts/addContact',\n  async (contact, { rejectWithValue }) => {\n    const data = await getContactsApi.addContact(contact);\n    try {\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  },\n  {\n    condition: (contact, { getState }) => {\n      const { contacts } = getState();\n      const dublicate = contacts.items.find(item => item.name === contact.name);\n      if (dublicate) {\n        alert(`${contact.name} is already in contacts list`);\n        return false;\n      }\n      return contact;\n    },\n  }\n);\n\nexport const deleteContact = createAsyncThunk(\n  'contacts/deleteContact',\n  async (id, { rejectWithValue }) => {\n    const data = await deleteContactApi.deleteContact(id);\n    try {\n      return data.id;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);"]},"metadata":{},"sourceType":"module"}