{"ast":null,"code":"import _defineProperty from\"/Users/tonya/Documents/GitHub/goit-react-hw-07-phonebook/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _objectSpread from\"/Users/tonya/Documents/GitHub/goit-react-hw-07-phonebook/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/Users/tonya/Documents/GitHub/goit-react-hw-07-phonebook/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState,useRef}from'react';import{nanoid}from'nanoid';import styles from'./ContactForm.module.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var initialState={name:'',number:''};var ContactForm=function ContactForm(_ref){var onChange=_ref.onChange;var _useState=useState(initialState),_useState2=_slicedToArray(_useState,2),contact=_useState2[0],setContact=_useState2[1];var nameInputId=useRef(nanoid());var numberInputId=useRef(nanoid());var handleChange=function handleChange(event){var _event$target=event.target,value=_event$target.value,name=_event$target.name;setContact(_objectSpread(_objectSpread({},contact),{},_defineProperty({},name,value)));};var handleSubmit=function handleSubmit(event){event.preventDefault();onChange(contact);resetForm();};var resetForm=function resetForm(){setContact(initialState);};return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(\"form\",{className:styles.form,onSubmit:handleSubmit,children:[/*#__PURE__*/_jsxs(\"div\",{className:styles.inputList,children:[/*#__PURE__*/_jsx(\"label\",{className:styles.label,htmlFor:nameInputId.current,children:\"Name\"}),/*#__PURE__*/_jsx(\"input\",{className:styles.input,type:\"text\",name:\"name\",value:contact.name,pattern:\"^[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]+(([' -][a-zA-Z\\u0430-\\u044F\\u0410-\\u042F ])?[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]*)*$\",title:\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",required:true,onChange:handleChange,id:nameInputId.current})]}),/*#__PURE__*/_jsxs(\"div\",{className:styles.inputList,children:[/*#__PURE__*/_jsx(\"label\",{className:styles.label,htmlFor:numberInputId.current,children:\"Number\"}),/*#__PURE__*/_jsx(\"input\",{className:styles.input,type:\"tel\",name:\"number\",value:contact.number,pattern:\"\\\\+?\\\\d{1,4}?[-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}\",title:\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\",onChange:handleChange,required:true,id:numberInputId.current})]}),/*#__PURE__*/_jsx(\"button\",{className:styles.button,type:\"submit\",children:\"Add contact\"})]})});};export default ContactForm;","map":{"version":3,"sources":["/Users/tonya/Documents/GitHub/goit-react-hw-07-phonebook/src/components/ContactForm/ContactForm.jsx"],"names":["useState","useRef","nanoid","styles","initialState","name","number","ContactForm","onChange","contact","setContact","nameInputId","numberInputId","handleChange","event","target","value","handleSubmit","preventDefault","resetForm","form","inputList","label","current","input","button"],"mappings":"2aAAA,OAASA,QAAT,CAAmBC,MAAnB,KAAiC,OAAjC,CACA,OAASC,MAAT,KAAuB,QAAvB,CAGA,MAAOC,CAAAA,MAAP,KAAmB,0BAAnB,C,6IAEA,GAAMC,CAAAA,YAAY,CAAG,CACnBC,IAAI,CAAE,EADa,CAEnBC,MAAM,CAAE,EAFW,CAArB,CAKA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,MAAkB,IAAfC,CAAAA,QAAe,MAAfA,QAAe,CACpC,cAA8BR,QAAQ,CAACI,YAAD,CAAtC,wCAAOK,OAAP,eAAgBC,UAAhB,eACA,GAAMC,CAAAA,WAAW,CAAGV,MAAM,CAACC,MAAM,EAAP,CAA1B,CACA,GAAMU,CAAAA,aAAa,CAAGX,MAAM,CAACC,MAAM,EAAP,CAA5B,CACA,GAAMW,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAAAC,KAAK,CAAI,CAC5B,kBAAwBA,KAAK,CAACC,MAA9B,CAAQC,KAAR,eAAQA,KAAR,CAAeX,IAAf,eAAeA,IAAf,CACAK,UAAU,gCACLD,OADK,wBAEPJ,IAFO,CAEAW,KAFA,GAAV,CAID,CAND,CAQA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAAAH,KAAK,CAAI,CAC5BA,KAAK,CAACI,cAAN,GACAV,QAAQ,CAACC,OAAD,CAAR,CACAU,SAAS,GACV,CAJD,CAMA,GAAMA,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CACtBT,UAAU,CAACN,YAAD,CAAV,CACD,CAFD,CAIA,mBACE,sCACE,cAAM,SAAS,CAAED,MAAM,CAACiB,IAAxB,CAA8B,QAAQ,CAAEH,YAAxC,wBACE,aAAK,SAAS,CAAEd,MAAM,CAACkB,SAAvB,wBACE,cAAO,SAAS,CAAElB,MAAM,CAACmB,KAAzB,CAAgC,OAAO,CAAEX,WAAW,CAACY,OAArD,kBADF,cAIE,cACE,SAAS,CAAEpB,MAAM,CAACqB,KADpB,CAEE,IAAI,CAAC,MAFP,CAGE,IAAI,CAAC,MAHP,CAIE,KAAK,CAAEf,OAAO,CAACJ,IAJjB,CAKE,OAAO,CAAC,wHALV,CAME,KAAK,CAAC,wIANR,CAOE,QAAQ,KAPV,CAQE,QAAQ,CAAEQ,YARZ,CASE,EAAE,CAAEF,WAAW,CAACY,OATlB,EAJF,GADF,cAiBE,aAAK,SAAS,CAAEpB,MAAM,CAACkB,SAAvB,wBACE,cAAO,SAAS,CAAElB,MAAM,CAACmB,KAAzB,CAAgC,OAAO,CAAEV,aAAa,CAACW,OAAvD,oBADF,cAIE,cACE,SAAS,CAAEpB,MAAM,CAACqB,KADpB,CAEE,IAAI,CAAC,KAFP,CAGE,IAAI,CAAC,QAHP,CAIE,KAAK,CAAEf,OAAO,CAACH,MAJjB,CAKE,OAAO,CAAC,wFALV,CAME,KAAK,CAAC,8FANR,CAOE,QAAQ,CAAEO,YAPZ,CAQE,QAAQ,KARV,CASE,EAAE,CAAED,aAAa,CAACW,OATpB,EAJF,GAjBF,cAiCE,eAAQ,SAAS,CAAEpB,MAAM,CAACsB,MAA1B,CAAkC,IAAI,CAAC,QAAvC,yBAjCF,GADF,EADF,CAyCD,CA/DD,CAkEA,cAAelB,CAAAA,WAAf","sourcesContent":["import { useState, useRef } from 'react';\nimport { nanoid } from 'nanoid';\nimport PropTypes from 'prop-types';\n\nimport styles from './ContactForm.module.css';\n\nconst initialState = {\n  name: '',\n  number: '',\n};\n\nconst ContactForm = ({ onChange }) => {\n  const [contact, setContact] = useState(initialState);\n  const nameInputId = useRef(nanoid());\n  const numberInputId = useRef(nanoid());\n  const handleChange = event => {\n    const { value, name } = event.target;\n    setContact({\n      ...contact,\n      [name]: value,\n    });\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    onChange(contact);\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setContact(initialState);\n  };\n\n  return (\n    <>\n      <form className={styles.form} onSubmit={handleSubmit}>\n        <div className={styles.inputList}>\n          <label className={styles.label} htmlFor={nameInputId.current}>\n            Name\n          </label>\n          <input\n            className={styles.input}\n            type=\"text\"\n            name=\"name\"\n            value={contact.name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            onChange={handleChange}\n            id={nameInputId.current}\n          />\n        </div>\n        <div className={styles.inputList}>\n          <label className={styles.label} htmlFor={numberInputId.current}>\n            Number\n          </label>\n          <input\n            className={styles.input}\n            type=\"tel\"\n            name=\"number\"\n            value={contact.number}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            onChange={handleChange}\n            required\n            id={numberInputId.current}\n          />\n        </div>\n        <button className={styles.button} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    </>\n  );\n};\n\n\nexport default ContactForm;\n\nContactForm.propTypes = {\n  onChange: PropTypes.func.isRequired,\n};\n\n\n"]},"metadata":{},"sourceType":"module"}