{"ast":null,"code":"// import { createAsyncThunk } from '@reduxjs/toolkit';\n// import { addContactApi, getContactsApi, deleteContactApi } from '../services/contactsAPI';\n// export const addContact = createAsyncThunk('contacts/addContact', async (contact, thunkApi) => {\n//   try {\n//     const contacts = await addContactApi(contact);\n//     return contacts;\n//   } catch (error) {\n//     return thunkApi.rejectWithValue(error);\n//   }\n// });\n// export const getContacts = createAsyncThunk('contacts/getContacts', async (_, thunkApi) => {\n//   try {\n//     const contacts = await getContactsApi();\n//     console.log('contacts :>> ', contacts);\n//     return contacts;\n//   } catch (error) {\n//     return thunkApi.rejectWithValue(error);\n//   }\n// });\n// export const deleteContact = createAsyncThunk('contacts/removeContact', async (id, thunkApi) => {\n//   try {\n//     const respId = await deleteContactApi(id);\n//     return respId;\n//   } catch (error) {\n//     return thunkApi.rejectWithValue(error);\n//   }\n// });\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport services from '../../shared/services/fetchContacts';\nconst getContacts = createAsyncThunk('contacts/fetchContacts', async (_, _ref) => {\n  let {\n    rejectWithValue\n  } = _ref;\n\n  try {\n    const result = await services.getContacts();\n    return result;\n  } catch (err) {\n    console.log('error');\n    return rejectWithValue(err);\n  }\n});\nconst addContact = createAsyncThunk('contacts/addContact', async (contactData, rejectWithValue) => {\n  try {\n    const newContact = await services.addContact(contactData);\n    console.log('newCont', contactData);\n    return newContact;\n  } catch (err) {\n    console.log('error');\n    return rejectWithValue(err);\n  }\n}, {\n  condition: (contactData, _ref2) => {\n    let {\n      getState\n    } = _ref2;\n    const {\n      contacts\n    } = getState();\n    const {\n      name,\n      phone\n    } = contactData;\n    const clone = contacts.contacts.find(clone => clone.name === name || clone.phone === phone);\n\n    if (clone) {\n      alert(`${name} is already in your contacts`);\n      return false;\n    }\n  }\n});\nconst deleteContact = createAsyncThunk('contacts/removeContact', async (contactId, rejectWithValue) => {\n  try {\n    return await services.removeContact(contactId);\n  } catch (err) {\n    console.log('error');\n    return rejectWithValue(err);\n  }\n});\nconst operations = {\n  getContacts,\n  addContact,\n  deleteContact\n};\nexport default operations;","map":{"version":3,"sources":["/Users/tonya/Documents/GitHub/goit-react-hw-07-phonebook/src/redux/operations.js"],"names":["createAsyncThunk","services","getContacts","_","rejectWithValue","result","err","console","log","addContact","contactData","newContact","condition","getState","contacts","name","phone","clone","find","alert","deleteContact","contactId","removeContact","operations"],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,gBAAT,QAAiC,kBAAjC;AAEA,OAAOC,QAAP,MAAqB,qCAArB;AAEA,MAAMC,WAAW,GAAGF,gBAAgB,CAClC,wBADkC,EAElC,OAAOG,CAAP,WAAkC;AAAA,MAAxB;AAAEC,IAAAA;AAAF,GAAwB;;AAChC,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMJ,QAAQ,CAACC,WAAT,EAArB;AACA,WAAOG,MAAP;AACD,GAHD,CAGE,OAAOC,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,WAAOJ,eAAe,CAACE,GAAD,CAAtB;AACD;AACF,CAViC,CAApC;AAaA,MAAMG,UAAU,GAAGT,gBAAgB,CACjC,qBADiC,EAEjC,OAAOU,WAAP,EAAoBN,eAApB,KAAwC;AACtC,MAAI;AACF,UAAMO,UAAU,GAAG,MAAMV,QAAQ,CAACQ,UAAT,CAAoBC,WAApB,CAAzB;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBE,WAAvB;AACA,WAAOC,UAAP;AACD,GAJD,CAIE,OAAOL,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,WAAOJ,eAAe,CAACE,GAAD,CAAtB;AACD;AACF,CAXgC,EAYjC;AACEM,EAAAA,SAAS,EAAE,CAACF,WAAD,YAA+B;AAAA,QAAjB;AAAEG,MAAAA;AAAF,KAAiB;AACxC,UAAM;AAAEC,MAAAA;AAAF,QAAeD,QAAQ,EAA7B;AACA,UAAM;AAAEE,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBN,WAAxB;AACA,UAAMO,KAAK,GAAGH,QAAQ,CAACA,QAAT,CAAkBI,IAAlB,CACZD,KAAK,IAAIA,KAAK,CAACF,IAAN,KAAeA,IAAf,IAAuBE,KAAK,CAACD,KAAN,KAAgBA,KADpC,CAAd;;AAGA,QAAIC,KAAJ,EAAW;AACTE,MAAAA,KAAK,CAAE,GAAEJ,IAAK,8BAAT,CAAL;AACA,aAAO,KAAP;AACD;AACF;AAXH,CAZiC,CAAnC;AA2BA,MAAMK,aAAa,GAAGpB,gBAAgB,CACpC,wBADoC,EAEpC,OAAOqB,SAAP,EAAkBjB,eAAlB,KAAsC;AACpC,MAAI;AACF,WAAO,MAAMH,QAAQ,CAACqB,aAAT,CAAuBD,SAAvB,CAAb;AACD,GAFD,CAEE,OAAOf,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,WAAOJ,eAAe,CAACE,GAAD,CAAtB;AACD;AACF,CATmC,CAAtC;AAYA,MAAMiB,UAAU,GAAG;AACjBrB,EAAAA,WADiB;AAEjBO,EAAAA,UAFiB;AAGjBW,EAAAA;AAHiB,CAAnB;AAMA,eAAeG,UAAf","sourcesContent":["// import { createAsyncThunk } from '@reduxjs/toolkit';\n// import { addContactApi, getContactsApi, deleteContactApi } from '../services/contactsAPI';\n\n// export const addContact = createAsyncThunk('contacts/addContact', async (contact, thunkApi) => {\n//   try {\n//     const contacts = await addContactApi(contact);\n//     return contacts;\n//   } catch (error) {\n//     return thunkApi.rejectWithValue(error);\n//   }\n// });\n\n// export const getContacts = createAsyncThunk('contacts/getContacts', async (_, thunkApi) => {\n//   try {\n//     const contacts = await getContactsApi();\n//     console.log('contacts :>> ', contacts);\n//     return contacts;\n//   } catch (error) {\n//     return thunkApi.rejectWithValue(error);\n//   }\n// });\n\n// export const deleteContact = createAsyncThunk('contacts/removeContact', async (id, thunkApi) => {\n//   try {\n//     const respId = await deleteContactApi(id);\n//     return respId;\n//   } catch (error) {\n//     return thunkApi.rejectWithValue(error);\n//   }\n// });\nimport { createAsyncThunk } from '@reduxjs/toolkit';\n\nimport services from '../../shared/services/fetchContacts';\n\nconst getContacts = createAsyncThunk(\n  'contacts/fetchContacts',\n  async (_, { rejectWithValue }) => {\n    try {\n      const result = await services.getContacts();\n      return result;\n    } catch (err) {\n      console.log('error');\n      return rejectWithValue(err);\n    }\n  }\n);\n\nconst addContact = createAsyncThunk(\n  'contacts/addContact',\n  async (contactData, rejectWithValue) => {\n    try {\n      const newContact = await services.addContact(contactData);\n      console.log('newCont', contactData);\n      return newContact;\n    } catch (err) {\n      console.log('error');\n      return rejectWithValue(err);\n    }\n  },\n  {\n    condition: (contactData, { getState }) => {\n      const { contacts } = getState();\n      const { name, phone } = contactData;\n      const clone = contacts.contacts.find(\n        clone => clone.name === name || clone.phone === phone\n      );\n      if (clone) {\n        alert(`${name} is already in your contacts`);\n        return false;\n      }\n    },\n  }\n);\n\nconst deleteContact = createAsyncThunk(\n  'contacts/removeContact',\n  async (contactId, rejectWithValue) => {\n    try {\n      return await services.removeContact(contactId);\n    } catch (err) {\n      console.log('error');\n      return rejectWithValue(err);\n    }\n  }\n);\n\nconst operations = {\n  getContacts,\n  addContact,\n  deleteContact,\n};\n\nexport default operations;"]},"metadata":{},"sourceType":"module"}